
1、二叉树题目
	考虑的算法：递归（递归地处理左右子树）、回溯（先序遍历二叉树）

2、典型题
	# 打印二叉树中路径和为n的所有路径
		回溯思路，当不是叶子节点时，依次遍历左右子树；若到达叶子节点，输出路径和为n的路径。
	# 二元查找树转换为排序双向链表
		中序遍历二叉树，每次将遍历到的节点插入链表的尾部即可。
	# 找出两个节点a,b的最低公共父节点
		分析可知：
		若a,b分别位于root的左右子树，则root就是最低公共父节点；
		若a,b都位于root的左子树，则公共父节点在root的左子树中；
		若a,b都位于root的右子树，则公共父节点在root的右子树中；
	# 是否为平衡二叉树（每个节点的左右子树）
		基本思路：判断root节点是否平衡（计算左右子树的深度差），然后递归地判断左右子树是否平衡
		提高效率：每次计算时，返回树的高度，这样判断某个节点是否平衡时，直接用返回的深度，不用再次计算
	# 二叉树的镜像
		先交换根节点的左右子节点，然后递归地镜像左右子树
	# 输入两棵树a,b，判断b是否为a的子结构
		分两步：1）在a中搜索b节点；2）判断搜索到的子树是否与b完全相同
		1）步可以按任意方式遍历
		2）步是一个递归的过程，先比较root节点，在分别比较左右子树
		