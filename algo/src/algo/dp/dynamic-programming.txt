
1、什么是动态规划？
	将待求问题分解成若干子问题，先求解这些子问题的解，然后从这些子问题的解得到原问题的解。

2、什么问题可以用动态规划来求解？
	具有最优子结构、重叠子问题两个特征的问题，可以考虑用DP
	
3、如何用DP求解问题？
	分析最优值的性质，定义出dp(i),或dp(i,j)
	依据最优子结构特征，写出状态转移方程
	定义出合理的DP初值
	自底向上求解DP，即给dp矩阵赋值
	依据得到的最优值，倒推dp矩阵输出最优解

4、典型题
	# 背包问题
		# 01背包：dp[i][j]表示选择前i件物品集的幂集装入容量为j的背包时可获得的最大价值，则
			dp[i][j] = max{dp[i-1][j], dp[i-1][j-c[i]] + w[i]}，对应是否装入第i件物品两种选择
		# 完全背包：dp[i][j]的意义不变，由于此时每件物品有无限多件，因此第i件物品可选择装入背包的数量为：0,1,...,V/c[i]，则有
			dp[i][j] = max {dp[i-1][j-k*c[i]] + k*w[i]}, 0<=k<=j/c[i]
		# 硬币兑换问题：将总面值看做背包容量，每种硬币看做不同物品重量，每种物品的价值都是1（这一点非常重要！），问题转化为：
			求恰好装满的完全背包，且求的是最小的价值，而不是最大的价值
			
	# 字符串相关的问题
		一般从尾字符向前分析，且DP建模的是最优值（一个数），要输出最优解，必须通过状态转移矩阵倒推。
		一般最优值的求解有两种情况：
			一种是dp(m,n)，即dp(i,j)是依照原问题定义的；
			另一种是在计算状态转移矩阵的过程中找出最优值。
		求子序列的问题一般dp(i,j)按问题定义，求子串的问题一般dp(i,j)定义成以xxx结尾的。
		
		# LCS_subseq：dp(i,j)表示x_1:i与y_1:j的最长公共子序列，最优值对应dp(m,n)
			if x_i == y_j, then dp(i,j) = dp(i-1, j-1) + 1
			if x_i != y_j, then dp(i,j) = max{dp(i-1,j), dp(i,j-1)}
		# LCS_substr: dp(i,j)表示x_1:i和y_1:j以x_i/y_j结尾的最长公共子串（此时一定有x_i == y_j）, 最优值不一定是dp(m,n)，需要在计算dp矩阵过程中发现。
			if x_i == y_j, then dp(i,j) = dp(i-1,j-1) + 1
			if x_i != y_j, then dp(i,j) = 0
		# EditDist: dp(i,j)表示x_1:i与y_1:j的编辑距离，最优值对应dp(m,n)
			if x_i == y_j, then dp(i,j) = dp(i-1,j-1)
			if x_i != y_j, then dp(i,j) = 1 + min{dp(i-1,j), dp(i,j-1), dp(i-1,j-1)}
		# LIS_subseq: dp(i)表示以x_i结尾的LIS，最优值需要在计算dp过程中发现
			dp(i) = max{1, dp(k)+1}, 1<=k<=i-1 && x_i > x_k
		# LIS_substr: dp(i)表示以x_i结尾的LIS，最优值需要在计算dp过程中发现
			if x_i > x_i-1, then dp(i) = dp(i-1) + 1
			if x_i < x_i-1, then dp(i) = 1
		# LSS(最大子串和）：dp(i)表示以x_i结尾的最大子串和，最优值需要在计算dp过程中发现
			if dp(i-1)>0, then dp(i) = dp(i-1) + x_i
			if dp(i-1)<0，then dp(i) = x_i	
		# MPD(最大数对之差)	：dp(i)表示以x_i为被减数（结尾）的最大数对之差，最优值需要在计算dp过程中发现
			if dp(i-1)>0, then dp(i) = dp(i-1) + x_i-1 - x_i
			if dp(i-1)<0, then dp(i) = x_i-1 - x_i
		# LNRS(最长不重复子串)：dp(i)表示以s_i结尾的LNRS，最优值需要在计算dp过程中发现
			if s_i与dp(i-1)的所有字符都不同, then dp(i) = dp(i-1) + 1
			if s_i与dp(i-1)的尾部开始c个字符都不同, then dp(i) = c + 1
	
	# 青蛙跳台阶/捞鱼/骰子问题：都是排列问题，如果是组合问题，则应该用回溯法来求解。
		# 跳台阶问题：dp(i)表示跳i个台阶的跳法，则有：
			dp(i) = dp(i-1) + dp(i-2)
		# 捞鱼问题（20条鱼放在20个桶里的不同放法）：dp(i,j)表示前i个桶放j条鱼的放法
			dp(i,j) = dp(i-1,j) + dp(i-1, j-1) + ... + dp(i-1, j-10)
			分别对应第i个桶放0,1, ... , 10条鱼的情况
		# 骰子问题（5个骰子仍在地上，点数和为N的情况有多少种）：dp(i,j)表示前i个骰子点数和为j的可能数目
			dp(i,j) = dp(i-1, j-1) + dp(i-1, j-2) + ... + dp(i-1, j-6)
			分别对应第i个骰子的点数为1,2, ... , 6的情况
		
		
		
		